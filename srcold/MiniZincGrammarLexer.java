// Generated from MiniZincGrammar.g4 by ANTLR 4.2.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MiniZincGrammarLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__42=1, T__41=2, T__40=3, T__39=4, T__38=5, T__37=6, T__36=7, T__35=8, 
		T__34=9, T__33=10, T__32=11, T__31=12, T__30=13, T__29=14, T__28=15, T__27=16, 
		T__26=17, T__25=18, T__24=19, T__23=20, T__22=21, T__21=22, T__20=23, 
		T__19=24, T__18=25, T__17=26, T__16=27, T__15=28, T__14=29, T__13=30, 
		T__12=31, T__11=32, T__10=33, T__9=34, T__8=35, T__7=36, T__6=37, T__5=38, 
		T__4=39, T__3=40, T__2=41, T__1=42, T__0=43, SINGLE_LINE_COMMENT=44, ID=45, 
		INT=46, NAT=47, WS=48;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'/'", "'of'", "'true'", "'set'", "'!='", "'float'", "'{'", "';'", "'..'", 
		"'}'", "'='", "'\\n'", "'solve'", "'\\/'", "'enum'", "'<='", "'\"'", "'int'", 
		"'constraint'", "'('", "'*'", "','", "'false'", "'output'", "'<-'", "'->'", 
		"'var'", "'par'", "':'", "'['", "'>='", "'=='", "'<'", "']'", "'show'", 
		"'bool'", "'>'", "'satisfy'", "')'", "'/\\'", "'+'", "'not'", "'-'", "SINGLE_LINE_COMMENT", 
		"ID", "INT", "NAT", "WS"
	};
	public static final String[] ruleNames = {
		"T__42", "T__41", "T__40", "T__39", "T__38", "T__37", "T__36", "T__35", 
		"T__34", "T__33", "T__32", "T__31", "T__30", "T__29", "T__28", "T__27", 
		"T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "SINGLE_LINE_COMMENT", "ID", "INT", "NAT", "WS"
	};


	public MiniZincGrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MiniZincGrammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62\u0119\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\3\3\3\3\3\3\4"+
		"\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21"+
		"\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33"+
		"\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3 "+
		"\3!\3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3\'\3\'\3"+
		"\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3)\3)\3)\3*\3*\3+\3+\3+\3+\3,\3,\3-\3-\7"+
		"-\u00fd\n-\f-\16-\u0100\13-\3-\3-\3.\6.\u0105\n.\r.\16.\u0106\3/\3/\3"+
		"/\5/\u010c\n/\3\60\6\60\u010f\n\60\r\60\16\60\u0110\3\61\6\61\u0114\n"+
		"\61\r\61\16\61\u0115\3\61\3\61\2\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21"+
		"\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30"+
		"/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.["+
		"/]\60_\61a\62\3\2\6\4\2\f\f\17\17\4\2C\\c|\3\2\62;\5\2\13\f\17\17\"\""+
		"\u011d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2"+
		"\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3"+
		"\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2"+
		"\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2"+
		"/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2"+
		"\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2"+
		"G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3"+
		"\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2"+
		"\2\2a\3\2\2\2\3c\3\2\2\2\5e\3\2\2\2\7h\3\2\2\2\tm\3\2\2\2\13q\3\2\2\2"+
		"\rt\3\2\2\2\17z\3\2\2\2\21|\3\2\2\2\23~\3\2\2\2\25\u0081\3\2\2\2\27\u0083"+
		"\3\2\2\2\31\u0085\3\2\2\2\33\u0088\3\2\2\2\35\u008e\3\2\2\2\37\u0091\3"+
		"\2\2\2!\u0096\3\2\2\2#\u0099\3\2\2\2%\u009b\3\2\2\2\'\u009f\3\2\2\2)\u00aa"+
		"\3\2\2\2+\u00ac\3\2\2\2-\u00ae\3\2\2\2/\u00b0\3\2\2\2\61\u00b6\3\2\2\2"+
		"\63\u00bd\3\2\2\2\65\u00c0\3\2\2\2\67\u00c3\3\2\2\29\u00c7\3\2\2\2;\u00cb"+
		"\3\2\2\2=\u00cd\3\2\2\2?\u00cf\3\2\2\2A\u00d2\3\2\2\2C\u00d5\3\2\2\2E"+
		"\u00d7\3\2\2\2G\u00d9\3\2\2\2I\u00de\3\2\2\2K\u00e3\3\2\2\2M\u00e5\3\2"+
		"\2\2O\u00ed\3\2\2\2Q\u00ef\3\2\2\2S\u00f2\3\2\2\2U\u00f4\3\2\2\2W\u00f8"+
		"\3\2\2\2Y\u00fa\3\2\2\2[\u0104\3\2\2\2]\u010b\3\2\2\2_\u010e\3\2\2\2a"+
		"\u0113\3\2\2\2cd\7\61\2\2d\4\3\2\2\2ef\7q\2\2fg\7h\2\2g\6\3\2\2\2hi\7"+
		"v\2\2ij\7t\2\2jk\7w\2\2kl\7g\2\2l\b\3\2\2\2mn\7u\2\2no\7g\2\2op\7v\2\2"+
		"p\n\3\2\2\2qr\7#\2\2rs\7?\2\2s\f\3\2\2\2tu\7h\2\2uv\7n\2\2vw\7q\2\2wx"+
		"\7c\2\2xy\7v\2\2y\16\3\2\2\2z{\7}\2\2{\20\3\2\2\2|}\7=\2\2}\22\3\2\2\2"+
		"~\177\7\60\2\2\177\u0080\7\60\2\2\u0080\24\3\2\2\2\u0081\u0082\7\177\2"+
		"\2\u0082\26\3\2\2\2\u0083\u0084\7?\2\2\u0084\30\3\2\2\2\u0085\u0086\7"+
		"^\2\2\u0086\u0087\7p\2\2\u0087\32\3\2\2\2\u0088\u0089\7u\2\2\u0089\u008a"+
		"\7q\2\2\u008a\u008b\7n\2\2\u008b\u008c\7x\2\2\u008c\u008d\7g\2\2\u008d"+
		"\34\3\2\2\2\u008e\u008f\7^\2\2\u008f\u0090\7\61\2\2\u0090\36\3\2\2\2\u0091"+
		"\u0092\7g\2\2\u0092\u0093\7p\2\2\u0093\u0094\7w\2\2\u0094\u0095\7o\2\2"+
		"\u0095 \3\2\2\2\u0096\u0097\7>\2\2\u0097\u0098\7?\2\2\u0098\"\3\2\2\2"+
		"\u0099\u009a\7$\2\2\u009a$\3\2\2\2\u009b\u009c\7k\2\2\u009c\u009d\7p\2"+
		"\2\u009d\u009e\7v\2\2\u009e&\3\2\2\2\u009f\u00a0\7e\2\2\u00a0\u00a1\7"+
		"q\2\2\u00a1\u00a2\7p\2\2\u00a2\u00a3\7u\2\2\u00a3\u00a4\7v\2\2\u00a4\u00a5"+
		"\7t\2\2\u00a5\u00a6\7c\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8\7p\2\2\u00a8"+
		"\u00a9\7v\2\2\u00a9(\3\2\2\2\u00aa\u00ab\7*\2\2\u00ab*\3\2\2\2\u00ac\u00ad"+
		"\7,\2\2\u00ad,\3\2\2\2\u00ae\u00af\7.\2\2\u00af.\3\2\2\2\u00b0\u00b1\7"+
		"h\2\2\u00b1\u00b2\7c\2\2\u00b2\u00b3\7n\2\2\u00b3\u00b4\7u\2\2\u00b4\u00b5"+
		"\7g\2\2\u00b5\60\3\2\2\2\u00b6\u00b7\7q\2\2\u00b7\u00b8\7w\2\2\u00b8\u00b9"+
		"\7v\2\2\u00b9\u00ba\7r\2\2\u00ba\u00bb\7w\2\2\u00bb\u00bc\7v\2\2\u00bc"+
		"\62\3\2\2\2\u00bd\u00be\7>\2\2\u00be\u00bf\7/\2\2\u00bf\64\3\2\2\2\u00c0"+
		"\u00c1\7/\2\2\u00c1\u00c2\7@\2\2\u00c2\66\3\2\2\2\u00c3\u00c4\7x\2\2\u00c4"+
		"\u00c5\7c\2\2\u00c5\u00c6\7t\2\2\u00c68\3\2\2\2\u00c7\u00c8\7r\2\2\u00c8"+
		"\u00c9\7c\2\2\u00c9\u00ca\7t\2\2\u00ca:\3\2\2\2\u00cb\u00cc\7<\2\2\u00cc"+
		"<\3\2\2\2\u00cd\u00ce\7]\2\2\u00ce>\3\2\2\2\u00cf\u00d0\7@\2\2\u00d0\u00d1"+
		"\7?\2\2\u00d1@\3\2\2\2\u00d2\u00d3\7?\2\2\u00d3\u00d4\7?\2\2\u00d4B\3"+
		"\2\2\2\u00d5\u00d6\7>\2\2\u00d6D\3\2\2\2\u00d7\u00d8\7_\2\2\u00d8F\3\2"+
		"\2\2\u00d9\u00da\7u\2\2\u00da\u00db\7j\2\2\u00db\u00dc\7q\2\2\u00dc\u00dd"+
		"\7y\2\2\u00ddH\3\2\2\2\u00de\u00df\7d\2\2\u00df\u00e0\7q\2\2\u00e0\u00e1"+
		"\7q\2\2\u00e1\u00e2\7n\2\2\u00e2J\3\2\2\2\u00e3\u00e4\7@\2\2\u00e4L\3"+
		"\2\2\2\u00e5\u00e6\7u\2\2\u00e6\u00e7\7c\2\2\u00e7\u00e8\7v\2\2\u00e8"+
		"\u00e9\7k\2\2\u00e9\u00ea\7u\2\2\u00ea\u00eb\7h\2\2\u00eb\u00ec\7{\2\2"+
		"\u00ecN\3\2\2\2\u00ed\u00ee\7+\2\2\u00eeP\3\2\2\2\u00ef\u00f0\7\61\2\2"+
		"\u00f0\u00f1\7^\2\2\u00f1R\3\2\2\2\u00f2\u00f3\7-\2\2\u00f3T\3\2\2\2\u00f4"+
		"\u00f5\7p\2\2\u00f5\u00f6\7q\2\2\u00f6\u00f7\7v\2\2\u00f7V\3\2\2\2\u00f8"+
		"\u00f9\7/\2\2\u00f9X\3\2\2\2\u00fa\u00fe\7\'\2\2\u00fb\u00fd\n\2\2\2\u00fc"+
		"\u00fb\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2"+
		"\2\2\u00ff\u0101\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0102\b-\2\2\u0102"+
		"Z\3\2\2\2\u0103\u0105\t\3\2\2\u0104\u0103\3\2\2\2\u0105\u0106\3\2\2\2"+
		"\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107\\\3\2\2\2\u0108\u010c\5"+
		"_\60\2\u0109\u010a\7/\2\2\u010a\u010c\5_\60\2\u010b\u0108\3\2\2\2\u010b"+
		"\u0109\3\2\2\2\u010c^\3\2\2\2\u010d\u010f\t\4\2\2\u010e\u010d\3\2\2\2"+
		"\u010f\u0110\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111`\3"+
		"\2\2\2\u0112\u0114\t\5\2\2\u0113\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115"+
		"\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118\b\61"+
		"\2\2\u0118b\3\2\2\2\b\2\u00fe\u0106\u010b\u0110\u0115\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}